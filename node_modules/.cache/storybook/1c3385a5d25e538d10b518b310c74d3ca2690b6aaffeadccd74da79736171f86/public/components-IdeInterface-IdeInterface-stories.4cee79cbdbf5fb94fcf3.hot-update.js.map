{"version":3,"file":"components-IdeInterface-IdeInterface-stories.4cee79cbdbf5fb94fcf3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAQA;AASA;AAuBA;AAWA;AACA;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AAEA;AAEA;AAOA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;;;;;;;;AAIA","sources":["webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { CommsManager } from \"jderobot-commsmanager\";\n\nimport \"./IdeInterface.css\";\nimport {\n  StatusBar,\n  Explorer,\n  CollapsableResizableColumn,\n  ResizableColumn,\n  ResizableRow,\n  FileEditor,\n} from \"Components\";\nimport { useTheme } from \"Utils\";\nimport {\n  Entry,\n  Layout,\n  ExplorerEntry,\n  EditorsEntry,\n  ViewersEntry,\n} from \"Types\";\n\nimport {\n  StyledIdeContainer,\n  StyledIdeHorizContainer,\n  StyledIdeVertContainer,\n  StyledViewerMenu,\n} from \"./IdeInterface.styles\";\n\nexport interface IdeInterfaceStyles {\n  bgColor?: string;\n}\n\ninterface IdeInterfaceProps {\n  commsManager: CommsManager | null;\n  resetManager: Function;\n  project: string;\n  explorers: ExplorerEntry[];\n  editorApi: any;\n  extraEditors: EditorsEntry[];\n  viewers: ViewersEntry[];\n  layout: Layout;\n  options: any;\n}\n\nconst IdeInterface = ({\n  commsManager,\n  resetManager,\n  project,\n  explorers,\n  editorApi,\n  extraEditors,\n  viewers,\n  layout,\n  options,\n}: IdeInterfaceProps) => {\n  const [currentFile, setCurrentFile] = useState<Entry | undefined>(undefined);\n  const theme = useTheme();\n\n  return (\n    <StyledIdeHorizContainer bgColor={theme.palette?.primary}>\n      <ResizableRow\n        baseWidth={[20, 40, 40]}\n        maxWidth={[40, 60, 60]}\n        showExplorer={explorers.length > 0}\n        layout={layout}\n      >\n        {explorers.length > 0 && (\n          <ResizableColumn>\n            {explorers.map((explorer) => (\n              <Explorer\n                setCurrentFile={setCurrentFile}\n                currentFile={currentFile}\n                project={project}\n                api={explorer}\n              />\n            ))}\n          </ResizableColumn>\n        )}\n        <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <FileEditor\n              currentFile={currentFile}\n              changeCurrentFile={setCurrentFile}\n              currentProjectname={project}\n              isUnibotics={false}\n              autosave={true}\n              manager={commsManager}\n              api={editorApi}\n              extraEditors={extraEditors}\n            />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer>\n        {/* <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <ViewersContainer viewers={viewers} options={options} />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer> */}\n      </ResizableRow>\n      <StatusBar\n        project={project}\n        commsManager={commsManager}\n        resetManager={resetManager}\n      />\n    </StyledIdeHorizContainer>\n  );\n};\n\nexport default IdeInterface;\n\nconst ViewersContainer = ({\n  viewers,\n  options,\n}: {\n  viewers: ViewersEntry[];\n  options: any;\n}) => {\n  const [visibility, setVisibility] = useState<boolean[]>(\n    Array(viewers.length).fill(false)\n  );\n  const theme = useTheme();\n\n  const toggleVisibility = (index: number) => {\n    setVisibility(\n      visibility.map((state, i) => {\n        if (index === i) {\n          return !state;\n        } else {\n          return state;\n        }\n      })\n    );\n  };\n\n  return (\n    <>\n      <StyledViewerMenu bgColor={theme.palette?.primary}>\n        <div className=\"ide-viewer-buttons\">\n          {viewers.map((viewer, index) => (\n            <button\n              className={`ide-viewer-toggle-button ${\n                visibility[index] ? \"active\" : \"\"\n              }`}\n              onClick={() => toggleVisibility(index)}\n            >\n              {viewer.icon}\n            </button>\n          ))}\n        </div>\n      </StyledViewerMenu>\n      <CollapsableResizableColumn state={visibility}>\n        {viewers.map((viewer) => viewer.component)}\n      </CollapsableResizableColumn>\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}