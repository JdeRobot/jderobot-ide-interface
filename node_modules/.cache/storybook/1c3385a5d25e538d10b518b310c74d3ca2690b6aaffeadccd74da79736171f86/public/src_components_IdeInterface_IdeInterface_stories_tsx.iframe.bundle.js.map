{"version":3,"file":"src_components_IdeInterface_IdeInterface_stories_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC5EA;AAAA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AAEA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AAGA;AACA;AAQA;AASA;AAKA;AAkBA;AAUA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAEA;AAMA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA","sources":["webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.css","webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.stories.tsx","webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.styles.ts","webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.tsx"],"sourcesContent":["\n      import API from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js!./IdeInterface.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js!./IdeInterface.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js!./IdeInterface.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport IdeInterface from \"./IdeInterface\";\n\ntype Story = StoryObj<typeof IdeInterface>;\n\nconst meta: Meta<typeof IdeInterface> = {\n  component: IdeInterface,\n};\n\nexport default meta;\n\nexport const Main: Story = {\n  render: () => (\n    <IdeInterface\n      commsManager={null}\n      resetManager={() => {}}\n      project={\"currentProjectname\"}\n      explorers={[]}\n      editorApi={[]}\n      extraEditors={[]}\n      viewers={[]}\n      options={[]}\n      layout={\"both\"}\n    />\n  ),\n};\n\nexport const Contained: Story = {\n  render: () => (\n    <IdeInterface\n      commsManager={null}\n      resetManager={() => {}}\n      project={\"currentProjectname\"}\n      explorers={[]}\n      editorApi={[]}\n      extraEditors={[]}\n      viewers={[]}\n      options={[]}\n      layout={\"both\"}\n    />\n  ),\n};\n","import styled from \"styled-components\"\n\nconst primaryColor = \"#007bff\"\n\ninterface StyledIdeHorizContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeHorizContainer = styled.div<StyledIdeHorizContainerProps>`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledIdeVertContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeVertContainer = styled.div<StyledIdeVertContainerProps>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledIdeContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeContainer = styled.div<StyledIdeContainerProps>`\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 3;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledViewerMenuProps {\n  bgColor?: string\n}\n\nexport const StyledViewerMenu = styled.div<StyledViewerMenuProps>`\n  align-items: center;\n  display: flex;\n  height: 32px;\n  justify-content: space-between;\n  max-height: 32px;\n  width: 100%;\n  z-index: 5;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`","import { useState } from \"react\";\nimport { CommsManager } from \"jderobot-commsmanager\";\n\nimport \"./IdeInterface.css\";\nimport {\n  StatusBar,\n  Explorer,\n  CollapsableResizableColumn,\n  ResizableColumn,\n  ResizableRow,\n  FileEditor,\n} from \"Components\";\nimport { useTheme } from \"Utils\";\nimport {\n  Entry,\n  Layout,\n  ExplorerEntry,\n  EditorsEntry,\n  ViewersEntry,\n} from \"Types\";\n\nimport {\n  StyledIdeContainer,\n  StyledIdeHorizContainer,\n  StyledIdeVertContainer,\n  StyledViewerMenu,\n} from \"./IdeInterface.styles\";\n\nexport interface IdeInterfaceStyles {\n  bgColor?: string;\n}\n\ninterface IdeInterfaceProps {\n  commsManager: CommsManager | null;\n  resetManager: Function;\n  project: string;\n  explorers: ExplorerEntry[];\n  editorApi: any;\n  extraEditors: EditorsEntry[];\n  viewers: ViewersEntry[];\n  layout: Layout;\n  options: any;\n}\n\nconst IdeInterface = ({\n  commsManager,\n  resetManager,\n  project,\n  explorers,\n  editorApi,\n  extraEditors,\n  viewers,\n  layout,\n  options,\n}: IdeInterfaceProps) => {\n  const [currentFile, setCurrentFile] = useState<Entry | undefined>(undefined);\n  const theme = useTheme();\n\n  return (\n    <StyledIdeHorizContainer bgColor={theme.palette?.primary}>\n      <ResizableRow\n        baseWidth={[20, 40, 40]}\n        maxWidth={[40, 60, 60]}\n        showExplorer={explorers.length > 0}\n        layout={layout}\n      >\n        {explorers.length > 0 && (\n          <ResizableColumn>\n            {explorers.map((explorer) => (\n              <Explorer\n                setCurrentFile={setCurrentFile}\n                currentFile={currentFile}\n                project={project}\n                api={explorer}\n              />\n            ))}\n          </ResizableColumn>\n        )}\n        <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <FileEditor\n              currentFile={currentFile}\n              changeCurrentFile={setCurrentFile}\n              currentProjectname={project}\n              isUnibotics={false}\n              autosave={true}\n              manager={commsManager}\n              api={editorApi}\n              extraEditors={extraEditors}\n            />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer>\n        <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <ViewersContainer viewers={viewers} options={options} />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer>\n      </ResizableRow>\n      <StatusBar\n        project={project}\n        commsManager={commsManager}\n        resetManager={resetManager}\n      />\n    </StyledIdeHorizContainer>\n  );\n};\n\nexport default IdeInterface;\n\nconst ViewersContainer = ({\n  viewers,\n  options,\n}: {\n  viewers: ViewersEntry[];\n  options: any;\n}) => {\n  const [visibility, setVisibility] = useState<boolean[]>(\n    Array(viewers.length).fill(false)\n  );\n  const theme = useTheme();\n\n  const toggleVisibility = (index: number) => {\n    setVisibility(\n      visibility.map((state, i) => {\n        if (index === i) {\n          return !state;\n        } else {\n          return state;\n        }\n      })\n    );\n  };\n\n  return (\n    <>\n      <StyledViewerMenu bgColor={theme.palette?.primary}>\n        <div className=\"ide-viewer-buttons\">\n          {viewers.map((viewer, index) => (\n            <button\n              className={`ide-viewer-toggle-button ${\n                visibility[index] ? \"active\" : \"\"\n              }`}\n              onClick={() => toggleVisibility(index)}\n            >\n              {viewer.icon}\n            </button>\n          ))}\n        </div>\n      </StyledViewerMenu>\n      <CollapsableResizableColumn state={visibility}>\n        {viewers.map((viewer) => viewer.component)}\n      </CollapsableResizableColumn>\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}