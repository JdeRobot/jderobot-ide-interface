"use strict";
self["webpackHotUpdatejderobot_ide_interface"]("components-IdeInterface-IdeInterface-stories",{

/***/ "./src/components/FileEditor/FileEditor.tsx":
/*!**************************************************!*\
  !*** ./src/components/FileEditor/FileEditor.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _FileEditor_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FileEditor.css */ "./src/components/FileEditor/FileEditor.css");
/* harmony import */ var Assets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Assets */ "./src/assets/index.ts");
/* harmony import */ var Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Utils */ "./src/utils/index.ts");
/* harmony import */ var _TextEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TextEditor */ "./src/components/FileEditor/TextEditor.tsx");
/* harmony import */ var Components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Components */ "./src/components/index.ts");







const fileTypes = {
    json: "json",
    md: "markdown",
    py: "python",
    config: "xml",
    cfg: "xml",
    xml: "xml",
    sdf: "xml",
    urdf: "xml",
    yaml: "yaml",
    repos: "yaml"
};
const FileEditor = ({ currentFile, changeCurrentFile, currentProjectname, isUnibotics, autosave, manager, api, extraEditors })=>{
    const { error, warning } = (0,Utils__WEBPACK_IMPORTED_MODULE_4__.useError)();
    // const settings = React.useContext(OptionsContext);
    const [fileContent, setFileContent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);
    const [zoomLevel, changeZoomLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
    const [hasUnsavedChanges, setHasUnsavedChanges] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [fileToSave, setFileToSave] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);
    const [language, setLanguage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("python");
    const [projectToSave, setProjectToSave] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(currentProjectname);
    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(""); // In case some editors cannot update states
    const initFile = async (file)=>{
        try {
            console.log("Loading new file...");
            const content = await api.file.get(currentProjectname, currentFile);
            const extension = file.name.split(".").pop();
            setFileContent(content);
            var fileType = "textplain";
            if (extension) {
                for(const key in fileTypes){
                    if (key === extension) {
                        fileType = fileTypes[key];
                        break;
                    }
                }
            }
            setHasUnsavedChanges(false); // Reset the unsaved changes flag when a new file is loaded
            for (const editor of extraEditors){
                for (const entry of editor.trigger){
                    if (entry.group === currentFile?.group && entry.extension === currentFile?.name.split(".").pop()) {
                        console.log("Loading new file ended");
                        return setLanguage(editor.language);
                    }
                }
            }
            setLanguage(fileType);
            console.log("Loading new file ended");
        } catch (e) {
            if (e instanceof Error) {
                console.error("Error fetching file content: " + e.message);
                error("Error fetching file content: " + e.message);
            }
        }
    };
    const autoSave = async ()=>{
        console.log("Auto saving file...");
        if (fileContent === null) {
            console.log("No content to save");
            return;
        }
        if (fileToSave === undefined) {
            console.log("No file to save");
            return;
        }
        if (fileToSave.access === false) {
            console.log("File is Read-Only");
            warning("File is Read-Only");
            return;
        }
        var content = fileContent;
        if (contentRef.current !== "") {
            content = contentRef.current;
        }
        try {
            await api.file.save(currentProjectname, fileToSave, content);
            console.log("Auto save completed");
        } catch (e) {
            if (e instanceof Error) {
                console.error("Error saving file: " + e.message);
                error("Error saving file: " + e.message);
            }
        }
    };
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        setHasUnsavedChanges(fileContent !== undefined);
    }, [
        fileContent
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const func = async ()=>{
            if (currentFile) {
                if (fileToSave && autosave) {
                    await autoSave();
                }
                contentRef.current = "";
                setFileContent(undefined);
                await initFile(currentFile);
                setFileToSave(currentFile);
            } else {
                setFileContent(undefined);
                contentRef.current = "";
                setHasUnsavedChanges(false);
            }
        };
        func();
    }, [
        currentFile
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        setFileToSave(undefined);
        if (currentFile) {
            handleSaveFile();
        }
        setProjectToSave(currentProjectname);
        setFileContent(undefined);
        contentRef.current = "";
    }, [
        currentProjectname
    ]);
    const handleSaveFile = async ()=>{
        console.log(fileContent, currentFile);
        if (fileContent === undefined) {
            console.log("No content to save");
            return;
        }
        if (currentFile === undefined) {
            console.log("No file is currently selected");
            warning("No file is currently selected.");
            return;
        }
        if (currentFile.access === false) {
            console.log("File is Read-Only");
            warning("File is Read-Only");
            return;
        }
        try {
            await api.file.save(projectToSave, currentFile, fileContent);
            setHasUnsavedChanges(false); // Reset the unsaved changes flag
        } catch (e) {
            if (e instanceof Error) {
                console.error("Error saving file: " + e.message);
                error("Error saving file: " + e.message);
            }
        }
    };
    const handleZoomIn = ()=>{
        changeZoomLevel((prevZoom)=>prevZoom + 1);
    };
    const handleZoomOut = ()=>{
        changeZoomLevel((prevZoom)=>prevZoom - 1);
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "bt-editor-menu",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "bt-editor-buttons",
                    children: [
                        hasUnsavedChanges && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "bt-unsaved-dot"
                        }, void 0, false, {
                            fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                            lineNumber: 210,
                            columnNumber: 33
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Components__WEBPACK_IMPORTED_MODULE_6__.Button, {
                            active: false,
                            variant: "standard",
                            id: "save-button",
                            onClick: handleSaveFile,
                            title: "Save File",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Assets__WEBPACK_IMPORTED_MODULE_3__.SaveIcon, {
                                className: "bt-icon",
                                fill: "var(--icon)"
                            }, void 0, false, {
                                fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                                lineNumber: 218,
                                columnNumber: 13
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                            lineNumber: 211,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Components__WEBPACK_IMPORTED_MODULE_6__.Button, {
                            active: false,
                            variant: "standard",
                            id: "zoom-in-button",
                            onClick: handleZoomIn,
                            title: "Increase Zoom",
                            children: "+"
                        }, void 0, false, {
                            fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                            lineNumber: 220,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Components__WEBPACK_IMPORTED_MODULE_6__.Button, {
                            active: false,
                            variant: "standard",
                            id: "zoom-out-button",
                            onClick: handleZoomOut,
                            title: "Decrease Zoom",
                            children: "-"
                        }, void 0, false, {
                            fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                            lineNumber: 229,
                            columnNumber: 11
                        }, undefined),
                        (()=>{
                            for (const editor of extraEditors){
                                if (editor.language === language) {
                                    var list = [];
                                    for (const b of editor.buttons){
                                        list.push(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                            className: "bt-editor-buttons-container",
                                            children: b
                                        }, void 0, false, {
                                            fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                                            lineNumber: 244,
                                            columnNumber: 21
                                        }, undefined));
                                    }
                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                                        children: list
                                    }, void 0, false);
                                }
                            }
                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false);
                        })()
                    ]
                }, void 0, true, {
                    fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                    lineNumber: 209,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                lineNumber: 208,
                columnNumber: 7
            }, undefined),
            fileContent ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                children: (()=>{
                    for (const editor of extraEditors){
                        if (editor.language === language) {
                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(editor.component, {
                                commsManager: manager,
                                project: currentProjectname,
                                file: currentFile,
                                changeFile: changeCurrentFile,
                                fileContent: fileContent,
                                setFileContent: setFileContent,
                                contentRef: contentRef,
                                saveFile: autoSave,
                                language: language,
                                zoomLevel: zoomLevel
                            }, void 0, false, {
                                fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                                lineNumber: 260,
                                columnNumber: 19
                            }, undefined);
                        }
                    }
                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TextEditor__WEBPACK_IMPORTED_MODULE_5__["default"], {
                        commsManager: manager,
                        fileContent: fileContent,
                        setFileContent: setFileContent,
                        saveFile: autoSave,
                        language: language,
                        zoomLevel: zoomLevel
                    }, void 0, false, {
                        fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                        lineNumber: 276,
                        columnNumber: 15
                    }, undefined);
                })()
            }, void 0, false) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                children: isUnibotics ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Assets__WEBPACK_IMPORTED_MODULE_3__.MonocolorUniboticsSplashIcon, {
                    className: "bt-splash-icon",
                    fill: "var(--header)"
                }, void 0, false, {
                    fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                    lineNumber: 290,
                    columnNumber: 13
                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Assets__WEBPACK_IMPORTED_MODULE_3__.MonocolorSplashIcon, {
                    className: "bt-splash-icon",
                    fill: "var(--header)"
                }, void 0, false, {
                    fileName: "/home/javier/Code/Forks/jderobot-ide-interface/src/components/FileEditor/FileEditor.tsx",
                    lineNumber: 295,
                    columnNumber: 13
                }, undefined)
            }, void 0, false)
        ]
    }, void 0, true);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FileEditor);
FileEditor.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "FileEditor",
    "props": {
        "currentFile": {
            "required": false,
            "tsType": {
                "name": "Entry"
            },
            "description": ""
        },
        "changeCurrentFile": {
            "required": true,
            "tsType": {
                "name": "Function"
            },
            "description": ""
        },
        "currentProjectname": {
            "required": true,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "isUnibotics": {
            "required": true,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "autosave": {
            "required": true,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "manager": {
            "required": true,
            "tsType": {
                "name": "union",
                "raw": "CommsManager | null",
                "elements": [
                    {
                        "name": "CommsManager"
                    },
                    {
                        "name": "null"
                    }
                ]
            },
            "description": ""
        },
        "api": {
            "required": true,
            "tsType": {
                "name": "any"
            },
            "description": ""
        },
        "extraEditors": {
            "required": true,
            "tsType": {
                "name": "Array",
                "elements": [
                    {
                        "name": "EditorsEntry"
                    }
                ],
                "raw": "EditorsEntry[]"
            },
            "description": ""
        }
    }
};


/***/ })

});
//# sourceMappingURL=components-IdeInterface-IdeInterface-stories.51fac806982d97cc8e1d.hot-update.js.map