{"version":3,"file":"components-IdeInterface-IdeInterface-stories.51fac806982d97cc8e1d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAKA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAGA;AACA;AAEA;AACA;;;;;AAGA;AACA;AACA;;;;;;;;;AAOA;AAEA","sources":["webpack://jderobot-ide-interface/./src/components/FileEditor/FileEditor.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./FileEditor.css\";\n\nimport {\n  SaveIcon,\n  MonocolorSplashIcon,\n  MonocolorUniboticsSplashIcon,\n} from \"Assets\";\nimport { useError } from \"Utils\";\n// import { OptionsContext } from \"../../options/Options\";\nimport {CommsManager} from \"jderobot-commsmanager\";\nimport { Entry, EditorsEntry } from \"Types\";\nimport TextEditor from \"./TextEditor\";\nimport { Button } from \"Components\";\n\nconst fileTypes = {\n  json: \"json\",\n  md: \"markdown\",\n  py: \"python\",\n  config: \"xml\",\n  cfg: \"xml\",\n  xml: \"xml\",\n  sdf: \"xml\",\n  urdf: \"xml\",\n  yaml: \"yaml\",\n  repos: \"yaml\",\n};\n\nconst FileEditor = ({\n  currentFile,\n  changeCurrentFile,\n  currentProjectname,\n  isUnibotics,\n  autosave,\n  manager,\n  api,\n  extraEditors,\n}: {\n  currentFile?: Entry;\n  changeCurrentFile: Function;\n  currentProjectname: string;\n  isUnibotics: boolean;\n  autosave: boolean;\n  manager: CommsManager | null;\n  api: any;\n  extraEditors: EditorsEntry[];\n}) => {\n  const { error, warning } = useError();\n  // const settings = React.useContext(OptionsContext);\n\n  const [fileContent, setFileContent] = useState<string | undefined>(undefined);\n  const [zoomLevel, changeZoomLevel] = useState(0);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [fileToSave, setFileToSave] = useState<Entry | undefined>(undefined);\n  const [language, setLanguage] = useState(\"python\");\n  const [projectToSave, setProjectToSave] = useState(currentProjectname);\n  const contentRef = useRef<string>(\"\"); // In case some editors cannot update states\n\n  const initFile = async (file: Entry) => {\n    try {\n      console.log(\"Loading new file...\");\n      const content = await api.file.get(currentProjectname, currentFile);\n      const extension = file.name.split(\".\").pop();\n      setFileContent(content);\n      var fileType = \"textplain\";\n      if (extension) {\n        for (const key in fileTypes) {\n          if (key === extension) {\n            fileType = fileTypes[key as keyof typeof fileTypes];\n            break;\n          }\n        }\n      }\n\n      setHasUnsavedChanges(false); // Reset the unsaved changes flag when a new file is loaded\n\n      for (const editor of extraEditors) {\n        for (const entry of editor.trigger) {\n          if (\n            entry.group === currentFile?.group &&\n            entry.extension === currentFile?.name.split(\".\").pop()\n          ) {\n            console.log(\"Loading new file ended\");\n            return setLanguage(editor.language);\n          }\n        }\n      }\n\n      setLanguage(fileType);\n      console.log(\"Loading new file ended\");\n    } catch (e) {\n      if (e instanceof Error) {\n        console.error(\"Error fetching file content: \" + e.message);\n        error(\"Error fetching file content: \" + e.message);\n      }\n    }\n  };\n\n  const autoSave = async () => {\n    console.log(\"Auto saving file...\");\n\n    if (fileContent === null) {\n      console.log(\"No content to save\");\n      return;\n    }\n\n    if (fileToSave === undefined) {\n      console.log(\"No file to save\");\n      return;\n    }\n\n    if (fileToSave.access === false) {\n      console.log(\"File is Read-Only\");\n      warning(\"File is Read-Only\");\n      return;\n    }\n\n    var content = fileContent;\n\n    if (contentRef.current !== \"\") {\n      content = contentRef.current;\n    }\n\n    try {\n      await api.file.save(currentProjectname, fileToSave, content);\n      console.log(\"Auto save completed\");\n    } catch (e) {\n      if (e instanceof Error) {\n        console.error(\"Error saving file: \" + e.message);\n        error(\"Error saving file: \" + e.message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setHasUnsavedChanges(fileContent !== undefined);\n  }, [fileContent]);\n\n  useEffect(() => {\n    const func = async () => {\n      if (currentFile) {\n        if (fileToSave && autosave) {\n          await autoSave();\n        }\n        contentRef.current = \"\";\n        setFileContent(undefined);\n        await initFile(currentFile);\n        setFileToSave(currentFile);\n      } else {\n        setFileContent(undefined);\n        contentRef.current = \"\";\n        setHasUnsavedChanges(false);\n      }\n    };\n    func();\n  }, [currentFile]);\n\n  useEffect(() => {\n    setFileToSave(undefined);\n    if (currentFile) {\n      handleSaveFile();\n    }\n    setProjectToSave(currentProjectname);\n    setFileContent(undefined);\n    contentRef.current = \"\";\n  }, [currentProjectname]);\n\n  const handleSaveFile = async () => {\n    console.log(fileContent, currentFile);\n    if (fileContent === undefined) {\n      console.log(\"No content to save\");\n      return;\n    }\n\n    if (currentFile === undefined) {\n      console.log(\"No file is currently selected\");\n      warning(\"No file is currently selected.\");\n      return;\n    }\n\n    if (currentFile.access === false) {\n      console.log(\"File is Read-Only\");\n      warning(\"File is Read-Only\");\n      return;\n    }\n\n    try {\n      await api.file.save(projectToSave, currentFile, fileContent);\n      setHasUnsavedChanges(false); // Reset the unsaved changes flag\n    } catch (e) {\n      if (e instanceof Error) {\n        console.error(\"Error saving file: \" + e.message);\n        error(\"Error saving file: \" + e.message);\n      }\n    }\n  };\n\n  const handleZoomIn = () => {\n    changeZoomLevel((prevZoom) => prevZoom + 1);\n  };\n\n  const handleZoomOut = () => {\n    changeZoomLevel((prevZoom) => prevZoom - 1);\n  };\n\n  return (\n    <>\n      <div className=\"bt-editor-menu\">\n        <div className=\"bt-editor-buttons\">\n          {hasUnsavedChanges && <div className=\"bt-unsaved-dot\"></div>}\n          <Button\n            active={false}\n            variant=\"standard\"\n            id=\"save-button\"\n            onClick={handleSaveFile}\n            title=\"Save File\"\n          >\n            <SaveIcon className=\"bt-icon\" fill={\"var(--icon)\"} />\n          </Button>\n          <Button\n            active={false}\n            variant=\"standard\"\n            id=\"zoom-in-button\"\n            onClick={handleZoomIn}\n            title=\"Increase Zoom\"\n          >\n            +\n          </Button>\n          <Button\n            active={false}\n            variant=\"standard\"\n            id=\"zoom-out-button\"\n            onClick={handleZoomOut}\n            title=\"Decrease Zoom\"\n          >\n            -\n          </Button>\n          {(() => {\n            for (const editor of extraEditors) {\n              if (editor.language === language) {\n                var list: any[] = [];\n                for (const b of editor.buttons) {\n                  list.push(\n                    <div className=\"bt-editor-buttons-container\">{b}</div>\n                  );\n                }\n                return <>{list}</>;\n              }\n            }\n            return <></>;\n          })()}\n        </div>\n      </div>\n      {fileContent ? (\n        <>\n          {(() => {\n            for (const editor of extraEditors) {\n              if (editor.language === language) {\n                return (\n                  <editor.component\n                    commsManager={manager}\n                    project={currentProjectname}\n                    file={currentFile}\n                    changeFile={changeCurrentFile}\n                    fileContent={fileContent}\n                    setFileContent={setFileContent}\n                    contentRef={contentRef}\n                    saveFile={autoSave}\n                    language={language}\n                    zoomLevel={zoomLevel}\n                  />\n                );\n              }\n            }\n            return (\n              <TextEditor\n                commsManager={manager}\n                fileContent={fileContent}\n                setFileContent={setFileContent}\n                saveFile={autoSave}\n                language={language}\n                zoomLevel={zoomLevel}\n              />\n            );\n          })()}\n        </>\n      ) : (\n        <>\n          {isUnibotics ? (\n            <MonocolorUniboticsSplashIcon\n              className=\"bt-splash-icon\"\n              fill=\"var(--header)\"\n            />\n          ) : (\n            <MonocolorSplashIcon\n              className=\"bt-splash-icon\"\n              fill=\"var(--header)\"\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FileEditor;\n"],"names":[],"sourceRoot":""}