{"version":3,"file":"components-IdeInterface-IdeInterface-stories.f2f0d901fbafd9ec11a5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AAEA;AAaA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AAAA;;;;;;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AAEA;AAGA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAIA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;AAEA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAIA","sources":["webpack://jderobot-ide-interface/./src/components/ResizableLayout/ResizableComponents.tsx"],"sourcesContent":["import { Resizable } from \"re-resizable\";\nimport { MonocolorSplashIcon } from \"Assets\";\nimport {\n  StyledResizableHoriz,\n  StyledResizableVert,\n} from \"./ResizableComponents.styles\";\nimport { useTheme } from \"Utils\";\n\nexport const ResizableHoriz = ({\n  width,\n  min,\n  max,\n  snap,\n  children,\n}: {\n  width: number;\n  min: number;\n  max: number;\n  snap: number[];\n  children: any;\n}) => {\n  const theme = useTheme();\n\n  return (\n    <StyledResizableHoriz\n      color={theme.palette?.primary}\n      hover={theme.palette?.secondary}\n    >\n      <Resizable\n        defaultSize={{\n          width: `${width}%`,\n        }}\n        enable={{\n          top: false,\n          right: true,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        bounds=\"parent\"\n        handleClasses={{\n          right: \"hresize-handle\",\n        }}\n        maxWidth={`${max}%`}\n        minWidth={`${min}%`}\n        snap={{ x: snap }}\n        snapGap={100}\n      >\n        {children}\n      </Resizable>\n    </StyledResizableHoriz>\n  );\n};\n\nResizableHoriz.defaultProps = {\n  min: 0,\n  max: 100,\n  snap: [],\n};\n\nexport const ResizableVert = ({\n  height,\n  min,\n  max,\n  snap,\n  children,\n}: {\n  height: number;\n  min: number;\n  max: number;\n  snap: number[];\n  children: any;\n}) => {\n  const theme = useTheme();\n\n  return (\n    <StyledResizableVert\n      color={theme.palette?.primary}\n      hover={theme.palette?.secondary}\n    >\n      <Resizable\n        defaultSize={{\n          height: `${height}%`,\n        }}\n        enable={{\n          top: false,\n          right: false,\n          bottom: true,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        bounds=\"parent\"\n        handleClasses={{\n          bottom: \"vresize-handle\",\n        }}\n        maxHeight={`${max}%`}\n        minHeight={`${min}%`}\n        snap={{ y: snap }}\n        snapGap={100}\n      >\n        {children}\n      </Resizable>\n    </StyledResizableVert>\n  );\n};\n\nResizableVert.defaultProps = {\n  min: 0,\n  max: 100,\n  snap: [],\n};\n\nexport const ResizableColumn = ({ children }: { children: any[] }) => {\n  if (children.length === 1) {\n    return <div className=\"ide-column-container\">{children[0]}</div>;\n  }\n\n  if (children.length === 2) {\n    return (\n      <div className=\"ide-column-container\">\n        <ResizableVert height={100 / children.length} max={100} snap={[0]}>\n          {children[0]}\n        </ResizableVert>\n        <div className=\"ide-column-filler-container\">{children[1]}</div>\n      </div>\n    );\n  }\n\n  return <div className=\"ide-column-container\"></div>;\n};\n\nexport const ResizableRow = ({\n  baseWidth,\n  maxWidth,\n  showExplorer,\n  layout,\n  children,\n}: {\n  baseWidth: number[];\n  maxWidth: number[];\n  showExplorer: boolean;\n  layout: string;\n  children: any[];\n}) => {\n  if (layout === \"only-editor\") {\n    // Remove viewers == Remove last element\n    children.pop();\n    baseWidth.pop();\n    maxWidth.pop();\n  }\n\n  if (layout === \"only-viewers\") {\n    // Remove editors == Remove middle element\n    children.splice(1, 1);\n    baseWidth.splice(1, 1);\n    maxWidth.splice(1, 1);\n  }\n\n  if (!showExplorer) {\n    // Remove explorers == Remove first element\n    console.log(children)\n    children.shift();\n    baseWidth.shift();\n    maxWidth.shift();\n  }\n  if (children.length === 0) {\n    return (\n      <MonocolorSplashIcon className=\"bt-splash-icon\" fill=\"var(--header)\" />\n    );\n  }\n  \n\n  if (children.length === 1) {\n    return <div className=\"ide-container\">{children[0]}</div>;\n  }\n\n  return (\n    <div className=\"ide-container\">\n      {children.slice(0, children.length - 1).map((comp, i) => (\n        <ResizableHoriz width={baseWidth[i]} max={maxWidth[i]} snap={[0]}>\n          {comp}\n        </ResizableHoriz>\n      ))}\n      <div className=\"ide-filler-container\">\n        {children[children.length - 1]}\n      </div>\n    </div>\n  );\n};\n\nexport const CollapsableResizableColumn = ({\n  state,\n  children,\n}: {\n  state: boolean[];\n  children: any[];\n}) => {\n  for (let index = state.length - 1; index >= 0; index--) {\n    if (!state[index]) {\n      children.splice(index, 1);\n    }\n  }\n\n  if (children.length === 0) {\n    return (\n      <MonocolorSplashIcon className=\"bt-splash-icon\" fill=\"var(--header)\" />\n    );\n  }\n\n  if (children.length === 1) {\n    return <div className=\"ide-column-container\">{children[0]}</div>;\n  }\n\n  return (\n    <div className=\"ide-column-container\">\n      {children.slice(0, children.length - 1).map((comp, i) => (\n        <ResizableVert height={100 / children.length} max={100} snap={[0]}>\n          {comp}\n        </ResizableVert>\n      ))}\n      <div className=\"ide-column-filler-container\">\n        {children[children.length - 1]}\n      </div>\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}