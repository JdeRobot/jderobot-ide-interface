{"version":3,"file":"components-IdeInterface-IdeInterface-stories.7879f735.iframe.bundle.js","mappings":";;;;;;;;;;;;AAqBA;;AAEA;;AASA;;;;;;;;;;;AAWA;;AAEA;;ACrCA;;;;;ACKA;AAOA;;;;;;;;AAQA;AAOA;;;;;;;;;AASA;AAOA;;;;;;;;AAQA;ACfA","sources":["webpack://jderobot-ide-interface/./src/components/ResizableLayout/ResizableComponents.styles.ts","webpack://jderobot-ide-interface/./src/components/ResizableLayout/ResizableComponents.tsx","webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.styles.ts","webpack://jderobot-ide-interface/./src/components/IdeInterface/IdeInterface.tsx"],"sourcesContent":["import styled from \"styled-components\"\n\nconst primaryColor = \"#007bff\"\n\ninterface StyledResizableHorizProps {\n  color?: string\n  hover?: string\n}\n\nexport const StyledResizableHoriz = styled.div<StyledResizableHorizProps>`\n  .hresize-handle {\n    position: absolute;\n    width: 5px !important;\n    height: 100% !important;\n    top: 0 !important;\n    right: -2.5px !important;\n    cursor: ew-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ${(p) => p.hover ?? primaryColor};\n    }\n    background-color: ${(p) => p.color ?? primaryColor};\n  }\n`\n\ninterface StyledResizableVertProps {\n  color?: string\n  hover?: string\n}\n\nexport const StyledResizableVert = styled.div<StyledResizableVertProps>`\n  .vresize-handle {\n    position: absolute;\n    height: 5px !important;\n    width: 100% !important;\n    right: 0 !important;\n    cursor: ns-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ${(p) => p.hover ?? primaryColor};\n    }\n    background-color: ${(p) => p.color ?? primaryColor};\n  }\n`","import { Resizable } from \"re-resizable\";\nimport { MonocolorSplashIcon } from \"Assets\";\nimport {\n  StyledResizableHoriz,\n  StyledResizableVert,\n} from \"./ResizableComponents.styles\";\nimport { useTheme } from \"Utils\";\n\nexport const ResizableHoriz = ({\n  width,\n  min,\n  max,\n  snap,\n  children,\n}: {\n  width: number;\n  min: number;\n  max: number;\n  snap: number[];\n  children: any;\n}) => {\n  const theme = useTheme();\n\n  return (\n    <StyledResizableHoriz\n      color={theme.palette?.primary}\n      hover={theme.palette?.primary}\n    >\n      <Resizable\n        defaultSize={{\n          width: `${width}%`,\n        }}\n        enable={{\n          top: false,\n          right: true,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        bounds=\"parent\"\n        handleClasses={{\n          right: \"hresize-handle\",\n        }}\n        maxWidth={`${max}%`}\n        minWidth={`${min}%`}\n        snap={{ x: snap }}\n        snapGap={100}\n      >\n        {children}\n      </Resizable>\n    </StyledResizableHoriz>\n  );\n};\n\nResizableHoriz.defaultProps = {\n  min: 0,\n  max: 100,\n  snap: [],\n};\n\nexport const ResizableVert = ({\n  height,\n  min,\n  max,\n  snap,\n  children,\n}: {\n  height: number;\n  min: number;\n  max: number;\n  snap: number[];\n  children: any;\n}) => {\n  const theme = useTheme();\n\n  return (\n    <StyledResizableVert\n      color={theme.palette?.primary}\n      hover={theme.palette?.primary}\n    >\n      <Resizable\n        defaultSize={{\n          height: `${height}%`,\n        }}\n        enable={{\n          top: false,\n          right: false,\n          bottom: true,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        bounds=\"parent\"\n        handleClasses={{\n          bottom: \"vresize-handle\",\n        }}\n        maxHeight={`${max}%`}\n        minHeight={`${min}%`}\n        snap={{ y: snap }}\n        snapGap={100}\n      >\n        {children}\n      </Resizable>\n    </StyledResizableVert>\n  );\n};\n\nResizableVert.defaultProps = {\n  min: 0,\n  max: 100,\n  snap: [],\n};\n\nexport const ResizableColumn = ({ children }: { children: any[] }) => {\n  if (children.length === 1) {\n    return <div className=\"ide-column-container\">{children[0]}</div>;\n  }\n\n  if (children.length === 2) {\n    return (\n      <div className=\"ide-column-container\">\n        <ResizableVert height={100 / children.length} max={100} snap={[0]}>\n          {children[0]}\n        </ResizableVert>\n        <div className=\"ide-column-filler-container\">{children[1]}</div>\n      </div>\n    );\n  }\n\n  return <div className=\"ide-column-container\"></div>;\n};\n\nexport const ResizableRow = ({\n  baseWidth,\n  maxWidth,\n  showExplorer,\n  layout,\n  children,\n}: {\n  baseWidth: number[];\n  maxWidth: number[];\n  showExplorer: boolean;\n  layout: string;\n  children: any[];\n}) => {\n  if (layout === \"only-editor\") {\n    // Remove viewers == Remove last element\n    children.pop();\n    baseWidth.pop();\n    maxWidth.pop();\n  }\n\n  if (layout === \"only-viewers\") {\n    // Remove editors == Remove middle element\n    children.splice(1, 1);\n    baseWidth.splice(1, 1);\n    maxWidth.splice(1, 1);\n  }\n\n  if (!showExplorer) {\n    // Remove explorers == Remove first element\n    children.shift();\n    baseWidth.shift();\n    maxWidth.shift();\n  }\n\n  if (children.length === 1) {\n    return <div className=\"ide-container\">{children[0]}</div>;\n  }\n\n  return (\n    <div className=\"ide-container\">\n      {children.slice(0, children.length - 1).map((comp, i) => (\n        <ResizableHoriz width={baseWidth[i]} max={maxWidth[i]} snap={[0]}>\n          {comp}\n        </ResizableHoriz>\n      ))}\n      <div className=\"ide-filler-container\">\n        {children[children.length - 1]}\n      </div>\n    </div>\n  );\n};\n\nexport const CollapsableResizableColumn = ({\n  state,\n  children,\n}: {\n  state: boolean[];\n  children: any[];\n}) => {\n  for (let index = state.length - 1; index >= 0; index--) {\n    if (!state[index]) {\n      children.splice(index, 1);\n    }\n  }\n\n  if (children.length === 0) {\n    return (\n      <MonocolorSplashIcon className=\"bt-splash-icon\" fill=\"var(--header)\" />\n    );\n  }\n\n  if (children.length === 1) {\n    return <div className=\"ide-column-container\">{children[0]}</div>;\n  }\n\n  return (\n    <div className=\"ide-column-container\">\n      {children.slice(0, children.length - 1).map((comp, i) => (\n        <ResizableVert height={100 / children.length} max={100} snap={[0]}>\n          {comp}\n        </ResizableVert>\n      ))}\n      <div className=\"ide-column-filler-container\">\n        {children[children.length - 1]}\n      </div>\n    </div>\n  );\n};\n","import styled from \"styled-components\"\n\nconst primaryColor = \"#007bff\"\n\ninterface StyledIdeHorizContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeHorizContainer = styled.div<StyledIdeHorizContainerProps>`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledIdeVertContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeVertContainer = styled.div<StyledIdeVertContainerProps>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledIdeContainerProps {\n  bgColor?: string\n}\n\nexport const StyledIdeContainer = styled.div<StyledIdeContainerProps>`\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 3;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`\n\ninterface StyledViewerMenuProps {\n  bgColor?: string\n}\n\nexport const StyledViewerMenu = styled.div<StyledViewerMenuProps>`\n  align-items: center;\n  display: flex;\n  height: 32px;\n  justify-content: space-between;\n  max-height: 32px;\n  width: 100%;\n  z-index: 5;\n  background-color: ${(p) => p.bgColor ?? primaryColor};\n`","import { useState } from \"react\";\nimport { CommsManager } from \"jderobot-commsmanager\";\n\nimport \"./IdeInterface.css\";\nimport {\n  StatusBar,\n  Explorer,\n  CollapsableResizableColumn,\n  ResizableColumn,\n  ResizableRow,\n  FileEditor,\n} from \"Components\";\nimport { useTheme } from \"Utils\";\nimport {\n  Entry,\n  Layout,\n  ExplorerEntry,\n  EditorsEntry,\n  ViewersEntry,\n} from \"Types\";\n\nimport {\n  StyledIdeContainer,\n  StyledIdeHorizContainer,\n  StyledIdeVertContainer,\n  StyledViewerMenu,\n} from \"./IdeInterface.styles\";\n\nexport interface IdeInterfaceStyles {\n  bgColor?: string;\n}\n\ninterface IdeInterfaceProps {\n  commsManager: CommsManager | null;\n  resetManager: Function;\n  project: string;\n  explorers: ExplorerEntry[];\n  editorApi: any;\n  extraEditors: EditorsEntry[];\n  viewers: ViewersEntry[];\n  layout: Layout;\n  options: any;\n}\n\nconst IdeInterface = ({\n  commsManager,\n  resetManager,\n  project,\n  explorers,\n  editorApi,\n  extraEditors,\n  viewers,\n  layout,\n  options,\n}: IdeInterfaceProps) => {\n  const [currentFile, setCurrentFile] = useState<Entry | undefined>(undefined);\n  const theme = useTheme();\n\n  return (\n    <StyledIdeHorizContainer bgColor={theme.palette?.primary}>\n      <ResizableRow\n        baseWidth={[20, 40, 40]}\n        maxWidth={[40, 60, 60]}\n        showExplorer={explorers.length > 0}\n        layout={layout}\n      >\n        {explorers.length > 0 && (\n          <ResizableColumn>\n            {explorers.map((explorer) => (\n              <Explorer\n                setCurrentFile={setCurrentFile}\n                currentFile={currentFile}\n                project={project}\n                api={explorer}\n              />\n            ))}\n          </ResizableColumn>\n        )}\n        <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <FileEditor\n              currentFile={currentFile}\n              changeCurrentFile={setCurrentFile}\n              currentProjectname={project}\n              isUnibotics={false}\n              autosave={true}\n              manager={commsManager}\n              api={editorApi}\n              extraEditors={extraEditors}\n            />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer>\n        <StyledIdeVertContainer bgColor={theme.palette?.primary}>\n          <StyledIdeContainer bgColor={theme.palette?.primary}>\n            <ViewersContainer viewers={viewers} options={options} />\n          </StyledIdeContainer>\n        </StyledIdeVertContainer>\n      </ResizableRow>\n      <StatusBar\n        project={project}\n        commsManager={commsManager}\n        resetManager={resetManager}\n      />\n    </StyledIdeHorizContainer>\n  );\n};\n\nexport default IdeInterface;\n\nconst ViewersContainer = ({\n  viewers,\n  options,\n}: {\n  viewers: ViewersEntry[];\n  options: any;\n}) => {\n  const [visibility, setVisibility] = useState<boolean[]>(\n    Array(viewers.length).fill(false)\n  );\n  const theme = useTheme();\n\n  const toggleVisibility = (index: number) => {\n    setVisibility(\n      visibility.map((state, i) => {\n        if (index === i) {\n          return !state;\n        } else {\n          return state;\n        }\n      })\n    );\n  };\n\n  return (\n    <>\n      <StyledViewerMenu bgColor={theme.palette?.primary}>\n        <div className=\"ide-viewer-buttons\">\n          {viewers.map((viewer, index) => (\n            <button\n              className={`ide-viewer-toggle-button ${\n                visibility[index] ? \"active\" : \"\"\n              }`}\n              onClick={() => toggleVisibility(index)}\n            >\n              {viewer.icon}\n            </button>\n          ))}\n        </div>\n      </StyledViewerMenu>\n      <CollapsableResizableColumn state={visibility}>\n        {viewers.map((viewer) => viewer.component)}\n      </CollapsableResizableColumn>\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}